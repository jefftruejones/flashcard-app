{"ast":null,"code":"var _jsxFileName = \"/Users/jeffjones/Qualified/flashcard/Project_Flashcards_Qualified_1/src/Layout/Deck/index.js\",\n    _s = $RefreshSig$();\n\nimport { useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api\";\nimport { CardText, Trash, Plus, HouseFill } from \"react-bootstrap-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Deck({\n  decks\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  let Deck = decks.find(deck => deck.id == deckId);\n  const [deck, setDeck] = useState(Deck); //const [cards, setCards] = useState([]);\n\n  const {\n    url\n  } = useRouteMatch();\n  console.log(\"decks is an arry\", Array.isArray(decks));\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function getDeck() {\n      try {\n        let result = await readDeck(deckId, abortController.signal);\n        setDeck(result);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    getDeck();\n    return () => abortController.abort();\n  }, []); // console.log(deck.cards);\n  // console.log(deck);\n\n  console.log(\"deck is \", deck); //deck.cards.some((e) => /./.test(e))\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"breadcrumb\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(HouseFill, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), \"\\xA0Home\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"breadcrumb-item active\",\n          \"aria-current\": \"page\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: url,\n            children: deck.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Deck, \"j+RZRzoHXTXInD3Kc9YaRHsOxsk=\", false, function () {\n  return [useParams, useRouteMatch];\n});\n\n_c = Deck;\nexport default Deck;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"sources":["/Users/jeffjones/Qualified/flashcard/Project_Flashcards_Qualified_1/src/Layout/Deck/index.js"],"names":["useParams","Link","useRouteMatch","useState","useEffect","readDeck","CardText","Trash","Plus","HouseFill","Deck","decks","deckId","find","deck","id","setDeck","url","console","log","Array","isArray","abortController","AbortController","getDeck","result","signal","error","abort","name"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,SAAhC,QAAiD,uBAAjD;;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAyB;AAAA;;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAaZ,SAAS,EAA5B;AACA,MAAIU,IAAI,GAAGC,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWH,MAAhC,CAAX;AACA,QAAM,CAACE,IAAD,EAAOE,OAAP,IAAkBb,QAAQ,CAACO,IAAD,CAAhC,CAHuB,CAIvB;;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAUf,aAAa,EAA7B;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,KAAK,CAACC,OAAN,CAAcV,KAAd,CAAhC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAEA,mBAAeC,OAAf,GAAyB;AACvB,UAAI;AACF,YAAIC,MAAM,GAAG,MAAMpB,QAAQ,CAACO,MAAD,EAASU,eAAe,CAACI,MAAzB,CAA3B;AACAV,QAAAA,OAAO,CAACS,MAAD,CAAP;AACD,OAHD,CAGE,OAAOE,KAAP,EAAc;AACd,cAAMA,KAAN;AACD;AACF;;AACDH,IAAAA,OAAO;AAEP,WAAO,MAAMF,eAAe,CAACM,KAAhB,EAAb;AACD,GAdQ,EAcN,EAdM,CAAT,CAPuB,CAsBvB;AAEA;;AAEAV,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,IAAxB,EA1BuB,CA4BvB;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,oBAAW,YAAhB;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,iBAAd;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAE,GAAV;AAAA,oCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAI,UAAA,SAAS,EAAC,wBAAd;AAAuC,0BAAa,MAApD;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAEG,GAAV;AAAA,sBAAgBH,IAAI,CAACe;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAuED;;GArGQnB,I;UACYV,S,EAIHE,a;;;KALTQ,I;AAuGT,eAAeA,IAAf","sourcesContent":["import { useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api\";\nimport { CardText, Trash, Plus, HouseFill } from \"react-bootstrap-icons\";\n\nfunction Deck({ decks }) {\n  const { deckId } = useParams();\n  let Deck = decks.find((deck) => deck.id == deckId);\n  const [deck, setDeck] = useState(Deck);\n  //const [cards, setCards] = useState([]);\n  const { url } = useRouteMatch();\n  console.log(\"decks is an arry\", Array.isArray(decks));\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function getDeck() {\n      try {\n        let result = await readDeck(deckId, abortController.signal);\n        setDeck(result);\n      } catch (error) {\n        throw error;\n      }\n    }\n    getDeck();\n\n    return () => abortController.abort();\n  }, []);\n  // console.log(deck.cards);\n\n  // console.log(deck);\n\n  console.log(\"deck is \", deck);\n\n  //deck.cards.some((e) => /./.test(e))\n\n  return (\n    <>\n      <h1>Deck</h1>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to={\"/\"}>\n              <HouseFill />\n              &nbsp;Home\n            </Link>\n          </li>\n\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            <Link to={url}>{deck.name}</Link>\n          </li>\n        </ol>\n      </nav>\n      {/* <div className=\"card w-100\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{deck.name}</h5>\n          <p className=\"card-text\">{deck.description}</p>{\" \"}\n          <div className=\"row\">\n            {\" \"}\n            <Link\n              to={`/decks/${deck.id}/edit`}\n              className=\"btn btn-secondary ml-1\n         \"\n            >\n              Edit\n            </Link>\n            <Link\n              to={`/decks/${deck.id}/study`}\n              className=\"btn btn-primary ml-1\"\n            >\n              <CardText /> &nbsp; Study\n            </Link>\n            <Link\n              to={`/decks/${deck.id}/study`}\n              className=\"btn btn-primary ml-1\"\n            >\n              <Plus /> &nbsp; Add Cards\n            </Link>\n            <Link className=\"btn btn-danger offset-5 offset-md-7 offset-lg-8\">\n              <Trash />\n            </Link>\n          </div>\n        </div>\n      </div>\n      {deck.cards ? <h2>Cards</h2> : <h2>No cards in deck yet</h2>}\n      {deck.cards\n        ? deck.cards.map((card) => (\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"d-flex\">\n                  {\" \"}\n                  <p className=\"card-text m-2 \">Front: {card.front}</p>\n                  <p className=\"card-text m-2 \">Back: {card.back}</p>\n                </div>\n                <div className=\"d-flex justify-content-end\">\n                  {\" \"}\n                  <Link className=\"btn btn-secondary m-1 \">Edit</Link>\n                  <Link className=\"btn btn-danger m-1\">\n                    <Trash />\n                  </Link>\n                </div>\n              </div>\n            </div>\n          ))\n        : null} */}\n    </>\n  );\n}\n\nexport default Deck;\n"]},"metadata":{},"sourceType":"module"}